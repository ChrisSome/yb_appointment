<?php

namespace center\modules\api\controllers;


use center\modules\appointment\models\DomainManager;
use center\modules\appointment\models\UserAppointments;
use Yii;
use common\models\Redis;
use center\controllers\ApiController;
use center\modules\appointment\models\ImportMobile;
use center\modules\appointment\models\UserAppointment;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;

/**
 * 预约控制器
 * Class AppointmentController
 * @package center\modules\api\controllers
 */
class AppointmentController extends ApiController
{
    public $enableCsrfValidation = false; //关闭验证
    public $check_params = [
        'mobile' => 'required|preg:/^1\d{10}/',
        'username' => 'required',
        'sign' => 'required'
    ];

    public $errors;
    public $model;

    /**
     * @inheritdoc
     */
    public function behaviors()
    {//test
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    //'apply' => ['post'],
                ],
            ],
        ];
    }
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->model =  new UserAppointment();
    }

    /**
     * 开始申请
     * @return \yii\web\Response
     */
    public function actionApply()
    {
        $params = Yii::$app->request->post();
        $get = Yii::$app->request->queryParams;
        $params = $params ? $params : $get;

        if (Yii::$app->request->method == 'OPTIONS') {
            exit(204);
        }

        if (!$this->checkDomain() && false) {
            return self::returnJson(403, [
                'code' => 403,
                'message' => '别瞎闹'
            ]);
        }
        //验证参数
        if (!$this->checkParams($params)) {
            return self::returnJson(406, [
                'code' => 406,
                'message' => json_encode($this->model->getErrors(), JSON_UNESCAPED_UNICODE)
            ]);
        }

        if (!$this->checkSign($params, true)) {
            return self::returnJson(408, [
                'code' => 408,
                'message' => '验签不通过'
            ]);
        }


        $sPhone = $params['mobile'];
        if (!$oImportPhone = ImportMobile::findOne(['mobile' => $sPhone])) {
            return self::returnJson(409, [
                'code' => 409,
                'message' => '不是预约用户，如果有疑问咨询在线客服'
            ]);
        }
        $model = $this->model;
        //$aHasAlreadyBindPhones = $model->getHasBindAlreadyPhone();
        //var_dump($aHasAlreadyBindPhones, in_array($sPhone, $aHasAlreadyBindPhones));exit;
        if ($model_one = UserAppointment::findOne(['mobile' => $sPhone])) {
            if ($model_one->status == 2) {

                return self::returnJson(407, [
                    'code' => 407,
                    'message' => ' 返回您的号码被限制, 请联系客服'
                ]);
            }

            return self::returnJson(406, [
                'code' => 406,
                'message' => '很抱歉， 您已预约'
            ]);
        } else {
            //echo 1;exit;
            $model->save();

            //echo 1;exit;
            return self::returnJson(200, [
                'code' => 200,
                'message' => '恭喜您， 预约成功',
            ]);
        }
    }

    /**
     * 获取参数
     * @return \yii\web\Response
     */
    public function actionGetSign()
    {
        $params = Yii::$app->request->queryParams;
        if (!$this->checkDomain()) {
            return self::returnJson(403, [
                'code' => 403,
                'message' => '别瞎闹'
            ]);
        }
        //验证参数
        if (!$this->checkParams($params)) {
            return self::returnJson(408, [
                'code' => 408,
                'message' => json_encode($this->model->getErrors(), JSON_UNESCAPED_UNICODE)
            ]);
        }

        $sign = $this->checkSign($params);

        return self::returnJson(200, [
            'code' => 200,
            'sign' => $sign
        ]);

    }
    public function actionDemo()
    {
        return $this->renderPartial('demo');
    }

}