<?php

namespace center\modules\appointment\models;

use center\modules\Core\interfaces\BaseModelInterface;
use center\modules\Core\models\BaseActiveRecord;
use center\modules\log\models\LogWriter;
use common\extend\Excel;
use common\models\FileOperate;
use Yii;
use yii\helpers\Json;
use yii\helpers\Url;
use League\Csv\Reader;

/**
 * This is the model class for table "import_mobiles".
 *
 * @property integer $id
 * @property string $mobile
 * @property integer $import_time
 * @property integer $mgr_id
 * @property string $mgr_name
 */
class ImportMobile extends BaseActiveRecord implements BaseModelInterface
{
    public $default_field = ['id', 'mobile', 'mgr_name','import_time',];
    public $file;
    public $start_time;
    public $stop_time;

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->mgr_id = Yii::$app->user->identity->getId();
            $this->mgr_name = Yii::$app->user->identity->username;
            $this->import_time = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'import_mobiles';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['mobile'], 'required'],
            [['import_time', 'mgr_id'], 'integer'],
            [['mobile'], 'string', 'max' => 11],
            [['mgr_name'], 'string', 'max' => 32],
            [['mobile'], 'unique'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'mobile' =>  Yii::t('app', 'Mobile'),
            'import_time' =>  Yii::t('app', 'Import Time'),
            'mgr_id' =>  Yii::t('app', 'Mgr ID'),
            'mgr_name' =>  Yii::t('app', 'Mgr Name'),
        ];
    }

    /**
     * 字段属性
     * @return array
     */
    public function getAttributesList()
    {
        return [
            'id' => 'ID',
            'mobile' =>  Yii::t('app', 'Mobile'),
            'import_time' =>  Yii::t('app', 'Import Time'),
            'mgr_id' =>  Yii::t('app', 'Mgr ID'),
            'mgr_name' =>  Yii::t('app', 'Mgr Name'),
        ];
    }

    /**
     * 要搜索的字段
     * @return array
     */
    public function getSearchInput()
    {
        //扩展字段加入搜索
        $exField = [];

        return yii\helpers\ArrayHelper::merge([
            'mobile' => [
                'label' => Yii::t('app', 'Mobile')
            ],
            'mgr_name' => [
                'label' => Yii::t('app', 'Mgr Name')
            ],

            'start_time' => [
                'label' => Yii::t('app', 'start opt time'),
                'class' => '  inputDate'
            ],
            'stop_time' => [
                'label' => Yii::t('app', 'end opt time'),
                'class' => '  inputDate'
            ]

        ], $exField);
    }


    //搜索字段
    private $_searchField = null;

    public function getSearchField()
    {
        if (!is_null($this->_searchField)) {
            return $this->_searchField;
        }

        $this->_searchField = [
            'id' => 'ID',
            'mobile' =>  Yii::t('app', 'Mobile'),
            'import_time' =>  Yii::t('app', 'Import Time'),
            'mgr_id' =>  Yii::t('app', 'Mgr ID'),
            'mgr_name' =>  Yii::t('app', 'Mgr Name'),
            'start_time' => Yii::t('app', 'start opt time'),
            'stop_time' => Yii::t('app', 'end opt time'),
        ];

        return $this->_searchField;
    }

    private $_temOldAttr;

    /**
     * 保存后记录日志
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        //写日志开始 获取脏数据
        $dirtyArr = LogWriter::dirtyData($this->_temOldAttr, $this->getCurrentData());
        if (!empty($dirtyArr)) {
            $logData = [
                'operator' => Yii::$app->user->identity->username,
                'target' => $this->mobile,
                'action' => $insert ? 'add' : 'edit',
                'action_type' => 'Import Mobile',
                'content' => Json::encode($dirtyArr),
                'class' => __CLASS__,
                'type' => 0,
            ];
            LogWriter::write($logData);
        }
    }

    /**
     * 删除
     * @return bool|void
     */
    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub
        $logData = [
            'operator' => $this->getMgrName(),
            'target' => $this->mobile,
            'action' => 'delete',
            'action_type' => 'delete Mobile',
            'content' => sprintf('%s删除号码【%s】成功', $this->getMgrName(), $this->mobile),
            'class' => get_class($this),
            'type' => 1
        ];
        return LogWriter::write($logData);
    }

    /**
     * 获取当前的日志需要记录的值
     * @return array
     */
    public function getCurrentData()
    {
        //获取扩展字段
        $normalField = yii\helpers\ArrayHelper::merge([
           'mobile', 'mgr_name'
        ], []);


        return  [
            'mobile' => $this->mobile,
            'mgr_name' => $this->mgr_name
        ];

    }

    /**
     * 获取已经导入的手机号码
     * @return array
     */
    public static function getImportMobile()
    {
        return self::find()->select('mobile')->column();
    }
    public $excelData = [];

    /**
     * 导入数据
     * @return array
     * @throws \yii\db\Exception
     */
    public function import_data()
    {
        $rs = [];
        $data = $this->excelData;
        if (empty($data)) {
            $rs = ['code' => 404, 'msg' => '没有要导入的数据'];
        } else {
            $insert_data = [];
            $batch_data = [];
            $field = [];
            $search = $this->getSearchField();
            $weather = new ImportMobile();
            $dates = [];
            $mgr_id = Yii::$app->user->identity->getId();
            $mgr_name = Yii::$app->user->identity->username;
            //处理结果记录日志
            $execute_rs = [];
            $execute_rs[] = ['行数', '是否成功', '处理结果'];
            $field = ['import_time', 'mgr_id', 'mgr_name', 'mobile'];
            //去重处理
            $hasAlreadyImportMobile = self::getImportMobile();
            //var_dump($hasAlreadyImportMobile);exit;
            $success_num = $fail_num = 0;
            $logFile = FileOperate::dir('import') . '/import_excel_'.'_' . date('YmdHis') . '.xls';
            //var_dump($hasAlreadyImportMobile, $data);exit;
            foreach ($data as $line => $v) {
                $v[0] = isset($v['A']) ? $v['A'] : $v[0];
                //var_dump($v[0], in_array($v[0], $hasAlreadyImportMobile));exit;
                if (!in_array($v[0], $hasAlreadyImportMobile)) {
                    if ($success_num != 0 && $success_num % 1000 == 0) {
                        Yii::$app->db->createCommand()->batchInsert(self::tableName(), $field, $batch_data)->execute();
                        $batch_data = [];
                    }
                    $insert_data = [
                        'import_time'=>time(),
                        'mgr_id' => $mgr_id,
                        'mgr_name' => $mgr_name,
                        'mobile' => $v[0]
                    ];
                    $hasAlreadyImportMobile[] = $v[0];
                    $execute_rs[] = [$line, 'success', $v[0].'导入成功'];
                    $success_num++;

                    //防止excel日志里面重复手机号码
                    $batch_data[] = $insert_data;
                } else {
                    $execute_rs[] = [$line, 'fail', $v[0].'已存在'];
                    $fail_num++;
                }

            }

            Excel::arrayToExcel($execute_rs, $logFile, 'import detail');
            $logMsg = Yii::t('app', 'batch excel help35', [
                'mgr' => $mgr_name,
                'ok_num' => $success_num,
                'err_num' => $fail_num,
                'file' => Yii::t('app', 'down info', ['download_url' => Url::to(['/appointment/import-mobile/download?file=' . $logFile])])
            ]);
            //先删除
            //self::deleteAll(['weather_date' => $dates]);
            //写入数据库
            if (!empty($batch_data)) {
                $res = Yii::$app->db->createCommand()->batchInsert(self::tableName(), $field, $batch_data)->execute();
            }

            $this->batchLog('mobile', $logMsg);
            //记录日志
            $rs = ['code' => 1, 'msg' => $logMsg];
        }

        return $rs;
    }

    public function batchLog($target, $logContent)
    {
        //写日志
        $logData = [
            'operator' => Yii::$app->user->identity->username,
            'target' => $target,
            'action' => 'batch',
            'action_type' => 'Batch Import Mobile',
            'content' => $logContent,
            'class' => get_class($this),
            'type' => 1
        ];
        return LogWriter::write($logData);
    }
}
