<?php

namespace center\modules\appointment\models;


use common\models\Redis;
use Yii;
use VOICEsend;
use MESSAGEsend;
use center\modules\Core\interfaces\BaseModelInterface;


/**
 * This is the model class for table "sms_history".
 *
 * @property integer $id
 * @property string $phone
 * @property string $content
 * @property integer $mgr_id
 * @property string $mgr_name
 * @property integer $created_at
 */
class SmsHistory extends \center\modules\Core\models\BaseActiveRecord implements BaseModelInterface
{
    public $default_field = ['id','phone' ,'status', 'type', 'content', 'ip_addr', 'created_at'];
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'sms_history';
    }

    public function beforeSave($insert)
    {
        $this->created_at = time();
        $this->ip_addr = ip2long($this->ip_addr);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['phone'], 'required'],
            [['mgr_id', 'created_at', 'type', 'status'], 'integer'],
            [['phone'], 'string', 'max' => 13],
            ['phone', 'match', 'pattern' => '/^1[3456789]{1}\d{9}$/', 'message' => '请输入正确的手机号'],
            [['content', 'sender_id', 'ip_addr'], 'string', 'max' => 255],
            [['mgr_name'], 'string', 'max' => 32],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'phone' => 'Phone',
            'content' => 'Content',
            'mgr_id' => 'Mgr ID',
            'mgr_name' => 'Mgr Name',
            'created_at' => 'Created At',
        ];
    }

    //搜索字段
    private $_searchField = null;
    public function getSearchField()
    {
        // TODO: Implement getSearchField() method.
        return [
            'id' => 'ID',
            'phone' => '接收手机',
            'type' => '发送类别',
            'ip_addr' => Yii::t('app', 'ip地址'),
            'mgr_name' => Yii::t('app', '操作员'),
            'created_at' => '发送时间',
            'updated_at' => '最后更新时间',
            'start_time' => '最后更新时间',
            'stop_time' => '最后更新时间',
            'status' => '是否使用',
            'content' => '发送内容'
        ];
    }


    public function getSearchInput()
    {
        // TODO: Implement getSearchInput() method.
        return [
            'phone' => [
                'label' => Yii::t('app', '手机号'),
            ],
            'ip_addr' => [
                'label' => Yii::t('app', 'ip地址'),
            ],
            'start_time' => [
                'label' => Yii::t('app', 'start opt time'),
                'class' => '  inputDate'
            ],
            'stop_time' => [
                'label' => Yii::t('app', 'end opt time'),
                'class' => '  inputDate'
            ]
        ];
    }

    public function getAttributesList()
    {
        // TODO: Implement getAttributesList() method.
    }

    public function generateCode($length = 4)
    {
        $code = 0;
        for ($i = 1; $i < $length; $i++) {
            $code .= mt_rand(0, 9);
        }

        return $code;
    }

    /**
     * 发送语音验证码
     * @return array
     */
    public function sendVoiceCode()
    {
        if (!ImportMobile::findOne(['mobile' => $this->phone])) {
            return ['code' => 409, 'message' => '不是预约用户，如果有疑问咨询在线客服'];
        }

        if (UserAppointment::findOne(['mobile' => $this->phone])) {
            return ['code' => 406, 'message' => '您已预约，不可重复预约'];
        }


        //ip次数限制
        $ip = Yii::$app->request->userIP;
        $key = sprintf('ip:send:%s', $ip);
        $num = Redis::executeCommand('get', $key);
        $phoneKey = sprintf('phone:send:%s', $this->phone);
        $phoneNum = Redis::executeCommand('get', $phoneKey);

        if ($num > 10) {
            return ['code' => 407, 'message' => 'ip获取验证码次数过多， 已被限制'];
        }
        if ($phoneNum > 10) {
            return ['code' => 408, 'message' => '该手机号获取验证码次数过多， 已被限制'];
        }
        $voice_configs = [];
        $voice_configs['appid'] = '21407';
        $voice_configs['appkey'] = 'a5153a0e921f4523bbf3dc541e75c646';
        $submail = new VOICEsend($voice_configs);
        $code = $this->generateCode();
        $content = '尊敬的用户，非常荣幸您刚刚在我们的网页预约了注册领取现金的活动，验证码是' . $code;
        $content = str_repeat($content, 3);
        $submail->SetContent($content);
        $submail->setTo($this->phone);
        /*
         * |调用 send 方法发送语音通知
         * |--------------------------------------------------------------------------
         */
        $xsend = $submail->send();
        if ($xsend['status'] == 'success') {
            $base = date('Y-m-d');
            $tomorrowDay = strtotime("$base  +1 day");
            $seconds = $tomorrowDay - time();
            if (Redis::executeCommand('exists', $key)) {
                Redis::executeCommand('INCRBY', $key, [1]);
            } else {
                Redis::executeCommand('setex', $key, [$seconds, 1]);
            }

            if (Redis::executeCommand('exists', $phoneKey)) {
                Redis::executeCommand('INCRBY', $phoneKey, [1]);
            } else {
                Redis::executeCommand('setex', $phoneKey, [$seconds, 1]);
            }
            //记录短信内容
            $aContent = [
                'phone' => $this->phone,
                'content' => $code,
                'sender_id' => $xsend['send_id'],
                'ip_addr' => $ip,
                'mgr_name' => 'SYSTEM'
            ];
            if ($this->load($aContent, '') && $this->save()) {
                $rs = ['code' => 200, 'message' => '发送验证码成功'];
            } else {
                $rs = ['code' => 500, 'message' => '发送验证码失败'];
            }
        } else {
            $rs = ['code' => 408, 'message' => '发送验证码失败'];
        }


        return $rs;
    }

    /**
    * 发送秒赛云语音验证码
    * @return array
    */
    public function sendMiaoSaiVoiceCode()
    {
        if (!ImportMobile::findOne(['mobile' => $this->phone])) {
            return ['code' => 409, 'message' => '不是预约用户，如果有疑问咨询在线客服'];
        }

        if (UserAppointment::findOne(['mobile' => $this->phone])) {
            return ['code' => 406, 'message' => '您已预约，不可重复预约'];
        }


        //ip次数限制
        $ip = Yii::$app->request->userIP;
        $key = sprintf('ip:send:%s', $ip);
        $num = Redis::executeCommand('get', $key);
        $phoneKey = sprintf('phone:send:%s', $this->phone);
        $phoneNum = Redis::executeCommand('get', $phoneKey);

        if ($num > 10) {
            return ['code' => 407, 'message' => 'ip获取验证码次数过多， 已被限制'];
        }
        if ($phoneNum > 10) {
            return ['code' => 408, 'message' => '该手机号获取验证码次数过多， 已被限制'];
        }

        $misaoSaiVovice = new \miaosaicode();
        $code = $this->generateCode();
        $content = '尊敬的用户，您的验证码是' . $code;
        $content = str_repeat($content, 3);
        $xsend = $misaoSaiVovice->send($this->phone, $content, time(), $misaoSaiVovice::STATE_VOICE);

        if ($xsend['result'] == $misaoSaiVovice::STATUS_SUCCESS) {
            $base = date('Y-m-d');
            $tomorrowDay = strtotime("$base  +1 day");
            $seconds = $tomorrowDay - time();
            if (Redis::executeCommand('exists', $key)) {
                Redis::executeCommand('INCRBY', $key, [1]);
            } else {
                Redis::executeCommand('setex', $key, [$seconds, 1]);
            }

            if (Redis::executeCommand('exists', $phoneKey)) {
                Redis::executeCommand('INCRBY', $phoneKey, [1]);
            } else {
                Redis::executeCommand('setex', $phoneKey, [$seconds, 1]);
            }
            //记录短信内容
            $aContent = [
                'phone' => $this->phone,
                'content' => $code,
                'sender_id' => $xsend['msgid'],
                'ip_addr' => $ip,
                'mgr_name' => 'SYSTEM'
            ];
            if ($this->load($aContent, '') && $this->save()) {
                $rs = ['code' => 200, 'message' => '发送验证码成功'];
            } else {
                $rs = ['code' => 500, 'message' => '发送验证码失败'];
            }
        } else {
            $rs = ['code' => 408, 'message' => '发送验证码失败'];
        }

        return $rs;
    }

    public function sendNoticeToUser($model)
    {

        $message_configs['appid']='49583';
        $message_configs['appkey']='7dca74e2b2112dfb751f0fba70d4dcd5';
        $message_configs['sign_type']='normal';
        $message_configs['server']='http://api.mysubmail.com/';
        $submail=new MESSAGEsend($message_configs);

        /*
         |必选参数
         |--------------------------------------------------------------------------
         |设置短信接收的11位手机号码
         |--------------------------------------------------------------------------
         */
        $submail->setTo($model->mobile);
        $content = "【夜猫体育】恭喜您，您注册预约的金额已到账，请登录查收。";
        $submail->SetContent($content);
        $send=$submail->send();

        if ($send['status'] == 'success') {
            //记录短信内容
            $aContent = [
                'phone' => $model->mobile,
                'content' => $content,
                'sender_id' => $send['send_id'],
                'ip_addr' => Yii::$app->request->userIP,
                'mgr_name' => $this->getMgrName(),
                'type' => 2,
                'status' => 1
            ];
            if ($this->load($aContent, '') && $this->save()) {
                $model->is_notice = 1;
                $model->save(false);
                $rs = ['code' => 0, 'message' => '通知成功'];
            } else {
                //var_dump($this->getErrors());exit;
                $rs = ['code' => 500, 'message' => '通知失败'];
            }
        } else {
            $rs = ['code' => 500, 'message' => '发送短信失败'];
        }

        return $rs;
    }
}
