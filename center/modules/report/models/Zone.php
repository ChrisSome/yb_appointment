<?php

namespace center\modules\report\models;

use center\models\Pagination;
use common\extend\Excel;
use Yii;

/**
 * This is the model class for table "report_zone".
 *
 * @property string $id
 * @property string $year
 * @property string $province_name
 * @property double $gdp
 * @property double $one_pro
 * @property double $two_pro
 * @property double $three_pro
 * @property double $finance
 * @property double $house
 * @property double $other
 * @property string $ctime
 */
class Zone extends \yii\db\ActiveRecord
{
    public $showField = [];
    public $showEditField = [];
    public $exportField = [];
    public $buyField = [];
    public $selectField = [];
    public $excelData = [];
    public $file;

    public function init()
    {
        //user表的字段
        $fields = Yii::$app->db->getSchema()->getTableSchema('report_zone')->columnNames;
        $attribute = $this->attributeLabels();
        foreach ($fields as $value) {
            if (array_key_exists($value, $attribute)) {
                $this->showField[$value] = $attribute[$value];
            }
        }
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'report_zone';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['year', 'ctime'], 'integer'],
            [['gdp', 'one_pro', 'two_pro', 'three_pro', 'finance', 'house', 'other'], 'number'],
            [['province_name'], 'string', 'max' => 15],
            [['start_At', 'stop_At'], 'string']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'year' => '年份',
            'province_name' => '省份',
            'gdp' => 'Gdp(亿元)',
            'one_pro' => '第一产业',
            'two_pro' => '第二产业',
            'three_pro' => '第三产业',
            'finance' => '金融',
            'house' => '房地产',
            'other' => '其他',
        ];
    }


    /**
     * 获取列表
     * @param $param
     * @return array
     */
    public function getList($param)
    {
        try {
            $query = self::find();
            $this->load($param, '');

            if (!empty($this->province_name)) {
                $query->andWhere('province_name like :pro', [':pro' => '%' . $this->province_name . '%']);
            }
            if (!empty($this->start_At)) {
                $query->andWhere('year >= :start', [':start' => $this->start_At]);
            }
            if (!empty($this->stop_At)) {
                $query->andWhere('year <= :stop', [':stop' => $this->stop_At]);
            }

            $pages = new Pagination([
                'totalCount' => $query->count(),
                'pageSize' => 10
            ]);
            $list = $query->orderBy('year asc')->offset($pages->offset)
                ->limit($pages->limit)
                ->asArray()
                ->all();
            $rs = ['code' => 1, 'data' => $list, 'pages' => $pages];
        } catch (\Exception $e) {
            $rs = ['code' => 500, 'msg' => '发生异常'];
        }

        return $rs;
    }

    /**
     * 导出
     * @param $param
     * @return array
     */
    public function export($param)
    {
        try {
            $query = self::find();
            $this->load($param, '');
            if (!empty($this->province_name)) {
                $query->andWhere('province_name like :pro', [':pro' => '%' . $this->province_name . '%']);
            }
            if (!empty($this->start_At)) {
                $query->andWhere('year >= :start', [':start' => $this->start_At]);
            }
            if (!empty($this->stop_At)) {
                $query->andWhere('year <= :stop', [':stop' => $this->stop_At]);
            }
            $list = $query->orderBy('year asc')->asArray()->all();
            $excelData = [];
            $excelData[0] = ['年份', '地区', 'gdp', '第一产业', '第二产业', '第三产业', '金融', '房地产', '其他'];
            foreach ($list as $v) {
                $excelData[] = [
                    $v['year'], $v['province_name'], $v['gdp'],$v['one_pro'], $v['two_pro'], $v['three_pro'], $v['finance'], $v['house'], $v['other']
                ];
            }
            $title = '年度导出';
            Excel::header_file($excelData, $title . '.xls', $title);

            exit;
        } catch (\Exception $e) {
            Yii::$app->getSession()->setFlash('error', '发生异常');
            //var_dump($e->getMessage());exit;
            $rs = ['code' => 500, 'msg' => '发生异常'];
        }

        return $rs;
    }

    public function getAttributesList()
    {
        //1校内新闻2大赛新闻3行业新闻
        return [
            'status' => [
                0 => '待审核',
                1 => '审核通过',
                2 => '未通过'
            ]
        ];
    }

    /**
     * 生成模板文件
     */
    public function template()
    {
        $excelList = [];
        foreach ($this->selectField as $one) {
            $excelList[0][] = $this->showField[$one] ? $this->showField[$one] : $this->showEditField[$one];
        }

        return $excelList;
    }

    /**
     * 要搜索的字段
     * @return array
     */
    public function getSearchInput()
    {
        //扩展字段加入搜索
        $exField = [];

        return yii\helpers\ArrayHelper::merge([
            'province_name' => [
                'label' => Yii::t('app', '地区')
            ],
            'start_At' => [
                'label' => Yii::t('app', '开始年份')
            ],
            'stop_At' => [
                'label' => Yii::t('app', '结束年份')
            ],

        ], $exField);
    }

    /**
     * 批量添加数据
     * @return array|bool
     */
    public function batch_data()
    {
        $db = Yii::$app->db;
        $trans = $db->beginTransaction();
        try {
            // 初始化失败和成功的数组
            $array_ok = [];
            $array_err = [
                '0' => [
                    Yii::t('app', 'batch excel line'),
                    Yii::t('app', 'account'),
                    Yii::t('app', 'batch excel result'),
                    Yii::t('app', 'batch excel detail'),
                ]
            ];

            //先判断是否有ip段，有再显示绑定ip列

            $file_data = $this->excelData;
            $fields = $this->selectField;
            unset($file_data[1]);
            $time = time();
            $insertData = [];
            $success = $error = 0;
            foreach ($file_data as $v) {
                $userData = [];

                foreach ($fields as $k => $field) {
                    // 分开 用户普遍字段和需要特殊处理的字段
                    $userData[$field] = $v[$k];
                }
                //先删除
                $db->createCommand()->delete(
                    self::tableName(),
                    [
                        'province_name' => $userData['province_name'],
                        'year' => $userData['year']
                    ]
                )->execute();
                $userData['ctime'] = $time;
                $insertData[] = $userData;
                $success++;
            }
            $fields[] = 'ctime';
            $rs = $db->createCommand()->batchInsert(
                self::tableName(),
                $fields,
                $insertData
            )->execute();
            if ($rs) {
                $trans->commit();
                return [
                    'ok' => $success,
                    'err' => $error,
                    'list' => $insertData
                ];
            } else {
                $trans->rollBack();
                Yii::$app->getSession()->setFlash('danger', $rs['msg']);
                return false;
            }
        } catch (\Exception $e) {
            echo $e->getLine();
            $trans->rollBack();

            return false;
        }
    }

    public $start_At;
    public $stop_At;

    public function getStatistics($param)
    {
        try {
            $query = self::find();

            $this->load($param);
            $start = $this->start_At ? $this->start_At : 2002;
            $stop = $this->stop_At ? $this->stop_At : 2017;
            $query->andWhere('year >= :start', [':start' => $start]);
            $query->andWhere('year <= :stop', [':stop' => $stop]);
            if (!empty($this->province_name)) {
                $query->andWhere(['province_name' => $this->province_name]);
            }
            $xAxis = $query->select('province_name')->indexBy('province_name')->asArray()->all();
            $xAxis = array_keys($xAxis);


            $data = $query->select('*')->indexBy('id')->asArray()->all();
            $resData = $this->getResData($data);
            $baseX = [];
            $legend = ['gdp', 'finance', 'one_pro', 'two_pro', 'three_pro', 'house', 'other'];
            $seriesData = [];
            $min = $start;
            while ($start <= $stop) {
                foreach ($xAxis as $province) {
                    $seriesData['gdp'][$start][] = isset($resData[$start][$province]) ?
                        $resData[$start][$province]['gdp'] : 0.00;
                    $seriesData['finance'][$start][] = isset($resData[$start][$province]) ?
                        $resData[$start][$province]['finance'] : 0.00;
                    $seriesData['one_pro'][$start][] = isset($resData[$start][$province]) ?
                        $resData[$start][$province]['one_pro'] : 0.00;
                    $seriesData['two_pro'][$start][] = isset($resData[$start][$province]) ?
                        $resData[$start][$province]['two_pro'] : 0.00;
                    $seriesData['three_pro'][$start][] = isset($resData[$start][$province]) ?
                        $resData[$start][$province]['three_pro'] : 0.00;
                    $seriesData['other'][$start][] = isset($resData[$start][$province]) ?
                        $resData[$start][$province]['other'] : 0.00;
                    $seriesData['house'][$start][] = isset($resData[$start][$province]) ?
                        $resData[$start][$province]['house'] : 0.00;
                }
                $baseX[] = $start;
                $start++;
            }

            if (empty($xAxis)) {
                $rs = ['code' => 404, 'msg' => '暂无数据'];
            } else {
                $rs = [
                    'code' => 1,
                    'title' => '年度人口统计',
                    'series' => json_encode($seriesData),
                    'xAxis' => json_encode($xAxis),
                    'baseX' => json_encode($baseX),
                    'min' => $min,
                    'max' => $stop
                ];
            }

        } catch (\Exception $e) {
            $rs = ['code' => 500, 'msg' => '发生异常' . $e->getMessage()];
        }

        return $rs;
    }

    /**
     * 处理数据
     * @param $data
     * @return array
     */
    public function getResData($data)
    {
        $res = [];
        foreach ($data as $item) {
            $res[$item['year']][$item['province_name']] = $item;
        }

        return $res;
    }
}
